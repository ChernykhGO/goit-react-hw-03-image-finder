{"version":3,"sources":["components/ImageGalleryItem/ImageGalleryItem.module.css","components/ImageGallery/ImageGallery.module.css","components/Searchbar/Searchbar.js","components/Loader/Loader.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/ImagesInfo/ImagesInfo.js","App.js","reportWebVitals.js","index.js","components/Searchbar/Searchbar.module.css"],"names":["module","exports","Searchbar","state","inputText","handleNameChange","event","setState","currentTarget","value","toLowerCase","handleSubmit","preventDefault","trim","toast","info","props","onSubmit","className","s","this","SearchForm","type","SearchFormButton","SearchFormLabel","SearchFormInput","autoComplete","autoFocus","placeholder","onChange","name","Component","ComponentLoader","color","height","width","timeout","ImageGallery","id","webformatURL","tags","ImageGalleryItem","src","alt","ImageGalleryItem_image","imageGallery","map","ImagesInfo","eror","status","page","prevProps","prevState","fetch","then","response","ok","json","Promise","reject","Error","data","hits","catch","error","message","App","handleFormSubmit","onloadMore","autoClose","position","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72809543.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageGalleryItem\":\"ImageGalleryItem_ImageGalleryItem__2P4OQ\",\"ImageGalleryItem_image\":\"ImageGalleryItem_ImageGalleryItem_image__1CqTs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageGallery\":\"ImageGallery_imageGallery__1MJLY\"};","// Компонент принимает один проп `onSubmit` - функцию для передачи значения инпута\r\n// при сабмите формы. Создает DOM-элемент следующей структуры.\r\n\r\nimport { Component } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport s from './Searchbar.module.css';\r\n\r\nexport default class Searchbar extends Component {\r\n    state = {\r\n        inputText: '',\r\n    };\r\n\r\n    //  обновление стейта на при нажатии на инпут\r\n    handleNameChange = event => {\r\n        this.setState({ inputText: event.currentTarget.value.toLowerCase() });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (this.state.inputText.trim() === '') {\r\n            // return alert('Введите  название в поиске');\r\n            return toast.info('Enter a search term in the search box!');\r\n        }\r\n\r\n        this.props.onSubmit(this.state.inputText);\r\n        this.setState({ inputText: '' });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <header className={s.Searchbar}>\r\n                <form onSubmit={this.handleSubmit} className={s.SearchForm}>\r\n                    <button type=\"submit\" className={s.SearchFormButton}>\r\n                        <span className={s.SearchFormLabel}>Search</span>\r\n                    </button>\r\n\r\n                    <input\r\n                        className={s.SearchFormInput}\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        placeholder=\"Search images and photos\"\r\n                        value={this.state.inputText}\r\n                        onChange={this.handleNameChange}\r\n                        name=\"inputText\"\r\n                    />\r\n                </form>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n","// Компонент спинера, отображется пока идет загрузка изобаржений. Используй любой\r\n// готовый компонент, например\r\n// [react-loader-spinner](https://github.com/mhnpd/react-loader-spinner) или любой\r\n// другой.\r\n\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default function ComponentLoader() {\r\n    return (\r\n        <div>\r\n            <Loader\r\n                type=\"TailSpin\"\r\n                color=\"#00BFFF\"\r\n                height={100}\r\n                width={100}\r\n                timeout={10000}\r\n            />\r\n            Loading...\r\n        </div>\r\n    );\r\n}\r\n","// Компонент элемента списка с изображением. Создает DOM-элемент следующей\r\n// структуры.\r\n// ```html\r\n// <li className=\"ImageGalleryItem\">\r\n//   <img src=\"\" alt=\"\" className=\"ImageGalleryItem-image\" />\r\n// </li>\r\n// ```;\r\nimport s from './ImageGalleryItem.module.css';\r\n\r\nexport default function ImageGallery({ id, webformatURL, tags }) {\r\n    return (\r\n        <li key={id} className={s.ImageGalleryItem}>\r\n            <img\r\n                src={webformatURL}\r\n                alt={tags}\r\n                className={s.ImageGalleryItem_image}\r\n            />\r\n        </li>\r\n    );\r\n}\r\n","// Список карточек изображений. Создает DOM-элемент следующей структуры.\r\n// ```html\r\n// <ul className=\"ImageGallery\">\r\n//   <!-- Набор <li> с изображениями -->\r\n// </ul>\r\n// ```;\r\n\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem';\r\nimport s from './ImageGallery.module.css';\r\n\r\nexport default function ImageGallery({ inputText }) {\r\n    return (\r\n        <ul className={s.imageGallery}>\r\n            {inputText.map(({ id, webformatURL, tags }) => (\r\n                <ImageGalleryItem\r\n                    id={id}\r\n                    webformatURL={webformatURL}\r\n                    tags={tags}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n","import { Component } from 'react';\r\n// import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n// import Loader from 'react-loader-spinner';\r\nimport Loader from '../Loader/Loader';\r\n\r\nimport ImageGallery from '../ImageGallery/ImageGallery';\r\n\r\nexport default class ImagesInfo extends Component {\r\n    state = {\r\n        inputText: null,\r\n        eror: null,\r\n        status: 'idle',\r\n        page: 1,\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.inputText !== this.props.inputText) {\r\n            this.setState({ status: 'pending' });\r\n            // console.log(prevProps.inputText);\r\n            // console.log(this.props.inputText);\r\n\r\n            fetch(\r\n                `https://pixabay.com/api/?key=22345544-d7e856a59bd0b8410f42b3802&q=${this.props.inputText}&image_type=photo&&orientation=horizontalpage=${this.state.page}&per_page=12`,\r\n            )\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    }\r\n                    return Promise.reject(\r\n                        new Error(\r\n                            `Не найдено изображения с названием ${this.props.inputText}`,\r\n                        ),\r\n                    );\r\n                })\r\n                .then(data =>\r\n                    this.setState({ inputText: data.hits, status: 'resolved' }),\r\n                )\r\n                .catch(error => this.setState({ error, status: 'rejected' }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { inputText, error, status } = this.state;\r\n\r\n        if (status === 'idle') {\r\n            return <div>enter the text...</div>;\r\n        }\r\n\r\n        if (status === 'pending') {\r\n            return <Loader />;\r\n        }\r\n\r\n        if (status === 'rejected') {\r\n            return <h1>{error.message}</h1>;\r\n        }\r\n\r\n        if (status === 'resolved') {\r\n            return (\r\n                <ImageGallery\r\n                    id={this.props.id}\r\n                    webformatURL={this.props.webformatURL}\r\n                    tags={this.props.tags}\r\n                    inputText={inputText}\r\n                />\r\n            );\r\n        }\r\n    }\r\n}\r\n","import { Component } from 'react';\nimport './App.css';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport ImagesInfo from './components/ImagesInfo/ImagesInfo';\n// import Button from './components/Button/Button';\n\nexport default class App extends Component {\n    state = {\n        inputText: '',\n    };\n\n    handleFormSubmit = inputText => {\n        // console.log(inputText);\n        this.setState({ inputText });\n    };\n\n    onloadMore = () => {};\n\n    render() {\n        // console.log(this.state.images);\n        return (\n            <div className=\"App\">\n                <Searchbar onSubmit={this.handleFormSubmit} />\n                <ImagesInfo inputText={this.state.inputText} />\n                {/* <Button /> */}\n                <ToastContainer autoClose={3000} position=\"top-center\" />\n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__1ppc0\",\"SearchForm\":\"Searchbar_SearchForm__UVQrw\",\"SearchFormButton\":\"Searchbar_SearchFormButton__32JVO\",\"SearchFormLabel\":\"Searchbar_SearchFormLabel__2Ygzy\",\"SearchFormInput\":\"Searchbar_SearchFormInput__2ndiJ\"};"],"sourceRoot":""}